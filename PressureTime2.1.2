/**
 * Code to control a pressure sensor Pressure Sensor. Keeps
 * board awake for time defined by int 'seconds' and sleeps
 * the board for multiple increments of 8 seconds using the
 * WDT and LowPower Library. Adjust the value of offCycles
 * to change the number of 8 second increments.
 *
 * Author: Jeremy Halligan and Christopher Liu
 * Date: 8/7/2015
 */

#include <SoftwareSerial.h>
#include <LowPower.h>
#include <ctype.h>
#include <SPI.h>
#include <Wire.h>
#include <RTClib.h>
#include <RTC_DS3234.h>

// Avoid spurious warnings, used for setting up the RTC
#undef PROGMEM
#define PROGMEM __attribute__(( section(".progmem.data") ))
#undef PSTR
#define PSTR(s) (__extension__({static prog_char __c[] PROGMEM = (s); &__c[0];}))

// Create an RTC instance, using the chip select pin
RTC_DS3234 RTC(10);             //SS Pin connected to Pin 10


//_______________________SETTINGS______________________//


//----SET DATE AND TIME HERE----//

char DATE[] = "Aug 05 2015"; //  Set Month Day Year
char TIME[] = "12:00:00";    //  24hr Format



//---------PIN SETUP-----------//

byte pressPin = 2;   //  Control pin to turn pressure sensor on/off

byte  commTx = 0;    //  Comm Serial Port Pins
byte  commRx = 1;

byte  modemTx = 6;    //  Modem Serial Port Pins
byte  modemRx = 7;
SoftwareSerial modemSerial(modemTx, modemRx);

byte  pressTx = 8;    //  Pressure Sensor Serial Port Pins
byte  pressRx = 9;
SoftwareSerial pressSerial(pressTx, pressRx);   //Sets up Software Serial for Pressure Sensor

byte  intPin = 3;     //  Pin 3 for interrupt (1)


//---SAMPLING CONFIGURATIONS---//

const    int numSamples = 10;  //  Dictates how many samples will be taken each interval
volatile int offCycles  = 2;  // # of cycles board is off for (1 cycle = 8 seconds)
volatile int awake_time = 10; //seconds board is awake for


//____________________END OF SETTINGS__________________//



//    Variables   //

volatile int interruptFlag = 0;
volatile int device_status = 0; // 0 for sleep, 1 for sampling
volatile int seconds = 0;
volatile int intTime = 0;
volatile int prevIntTime = 0;
int sampleNumber = 0;          //  Keeps count of the samples
String sampleData[numSamples];
int sampleStamp;
char buffer1[7];
String timeStamp;
String dataString;
const String semicln = "; ";
const int secondsBetweenSamples = 10; //seconds between samples
const int waitTimeBoot = 20; //amount of time to wait before beginning sampling


/**
 * ISR for timer 1, increments in seconds.
 */
ISR(TIMER1_COMPA_vect) {
  seconds ++;
  if (seconds == 1000) {
    seconds = 0;
  }
}

void setup() {
  Serial.begin(9600);      //serial comm with Modem
  delay(10);
  pressSerial.begin(9600);    //serial comm with Pressure Sensor
  delay(10);
  modemSerial.begin(9600);
  delay(10);
  SPI.begin();             //Initialize SPI and RTC for the RTC
  delay(10);
  RTC.begin();
  delay(10);

  pinMode(pressPin, OUTPUT);                   //Set up Pressure sensor control pin

  // Prints Date and Time set
  Serial.print("Setting time to  : ");
  delay(10);
  Serial.print(__DATE__);
  Serial.print(' ');
  Serial.println(__TIME__);
  RTC.adjust(DateTime(__DATE__, __TIME__));    //sets the RTC to the date & time specified above

  //set pins for communication with modem
  pinMode(commRx, INPUT);
  pinMode(commTx, OUTPUT);

  delay(5);

  attachInterrupt(1, intPIN3, CHANGE);
  /** Timer 1 Start-up**/
  //   Timer1 initialization for awake time
  cli();
  TCCR1A = 0; //Set Timer 1 registers to 0
  TCCR1B = 0;
  // setCTC compare register
  OCR1A = 15264; //this value is approx. 1 second worth of clock cycles
  // CTC Mode for Timer 1
  TCCR1B |= (1 << WGM12);
  //Prescale the timer to 1024 prescaler
  TCCR1B |= (1 << CS10);
  TCCR1B |= (1 << CS12);
  //Enable timer compare interrupt
  TIMSK1 |= (1 << OCIE1A); //Starts timer 1 ********
  //turn back on global interrupts.
  sei();

}

void loop() {
  device_status = 0;
  if (checkInterrupt()) {
    wakeUpHandler();
  }
  digitalWrite(pressPin, HIGH);
  sampleNumber++;




  //wait for voltage to stabilize
  waitSeconds(waitTimeBoot);

  pressSerial.listen();

  //   SAMPLE LOOP
  //Takes N (numSamples) samples from Pressure Sensor, time stamps each one and stores into sampleData
  for (int i = 0, sampleStamp = 0; i < numSamples; i++, sampleStamp++) {
    device_status = 1;
    if (checkInterrupt()) {
      wakeUpHandler();
    }

    pressSerial.flush();     //Flush the serial
    /**
     * Send command to pressSerial port, which is 8(RX), 9 (TX)
     * The pressure sensor command 'g' followed by a carriage return
     * will trigger a new reading
     */
    pressSerial.print('*');
    pressSerial.print('G');
    pressSerial.print('\r');

    //clear the buffer
    for (int i = 0; i < 6; i++) {
      buffer1[i] = ' ';
    }

    dataString = getTime();

    while (!pressSerial.available()) {} // Wait for characters on serial port
    delay(100);

    //  Read in first 6 characters to buffer (ie. pressure values)
    for (int i = 0; i < 6; i++) {
      buffer1[i] = pressSerial.read();
    }

    //   Concatenate into TIME; PRESSURE; SAMPLESET#SAMPLE#
    //   Ex: "15/08/16 12:00:00; 102156; 11"
    dataString.concat(semicln);
    delay(50);
    dataString.concat(buffer1);        //Pressure
    delay(150);
    dataString.concat(semicln);
    delay(50);
    dataString.concat(sampleNumber);   //Sample Set Number
    dataString.concat(sampleStamp);    //Individual Sample Number (per set)
    delay(150);

    //  Store data string into an sampleData
    sampleData[i] = dataString;

    waitSeconds(secondsBetweenSamples);  //Wait for 10 seconds until next sample

    pressSerial.flush();   //Flush serial for any misc. data

  };  //End of SAMPLE LOOP

  if (checkInterrupt()) {
    wakeUpHandler();
  }

  //  Writes to modem serial port, all values in array
  Serial.println("Printing samples to Modem");
  for (int i = 0; i < numSamples; i++) {
    modemSerial.println(sampleData[i]);
    delay(150);
  }

  //    Turn off pressure pin
  digitalWrite(pressPin, LOW);
  delay(5);
  //    Sets Arduino to Sleep
  sleep(offCycles);

  Serial.println("Completed Sample.");
  delay(5);
  interruptFlag = 0;
}


/*____________INTERRUPTS_________*/

void intPIN3() {
  //ISR
  int intTime = millis();    //filter out interrupts triggered by noise from the first interrupt
  if (intTime - prevIntTime > 500) {
    Serial.println("INTERRUPT SUCESSFUL");
    prevIntTime = intTime;
    interruptFlag = 1;
    Serial.println(interruptFlag);
  }
}

/*______INTERRUPT HANDLER______*/

void wakeUpHandler() {
  // 0 for sleep, 1 for sampling
  if (device_status == 0) {
    Serial.println("Device Status = SLEEP");
    Serial.println("Wake device from sleep [Y/N]?");
    interruptFlag = 0;
  }
  else if (device_status == 1) {
    Serial.println("Device Status = SAMPLING");
    Serial.println("Exit to Menu [Y/N]? (Will mess up current sample)");
    interruptFlag = 0;
  }
  else {
    Serial.println("Error Determining Device Status.");
    interruptFlag = 0;
  }
}



boolean checkInterrupt() {
  if (interruptFlag) {
    Serial.println("Interrupt Detected!");
    return true;
  }
  return false;
}

/*___________FUNCTIONS___________*/

void sleep(int cycles) {
  //Sets Arduino to sleep for N cycles where each cycle lasts 8 seconds
  Serial.println("Going to sleep");
  device_status = 0;
  for (int index = 0; index < cycles; index++) {
    LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
    if (checkInterrupt()) {
      wakeUpHandler();
    }
  }
}

/** Retrieves time from RTC and returns it in YY/MM/DD HH:MM:SS format **/
String getTime() {
  DateTime now = RTC.now();     //gets time
  const int len = 32;
  static char buf[len];
  return now.toStringYMD(buf, len); //returns in format mentioned above
}

/**
 * Delay the board a set number of seconds using timer 1
 */
void waitSeconds(int timeSec) {
  Serial.print("Delay for ");
  Serial.println(timeSec);
  device_status = 1;
  seconds = 0;
  int comp = timeSec;

  while (seconds < comp) {
    //Serial.println(seconds);
    if (checkInterrupt()) {
      wakeUpHandler();
    }
  }
}

